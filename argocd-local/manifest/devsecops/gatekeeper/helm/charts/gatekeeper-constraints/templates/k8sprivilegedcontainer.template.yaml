{{ if .Values.K8sPrivilegedContainer.enabled }}
---
apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: k8sprivilegedcontainer
  labels:
    {{- include "gatekeeper-constraints.labels" . | nindent 4 }}
  annotations:
    metadata.gatekeeper.sh/title: "Privileged Container"
    metadata.gatekeeper.sh/version: 1.0.0
    description: >-
      Controls the ability of any container to enable privileged mode.
      Corresponds to the `privileged` field in a PodSecurityPolicy. For more
      information, see
      https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged
spec:
  crd:
    spec:
      names:
        kind: K8sPrivilegedContainer
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            operations:
              type: array
              items:
                type: string
            exemptImages:
              description: >-
                Any container that uses an image that matches an entry in this list will be excluded
                from enforcement.
              type: array
              items:
                type: string

  targets:
  - target: admission.k8s.gatekeeper.sh
    rego: |
      package k8sprivilegedcontainer

      import data.lib.k8sprivilegedcontainer.is_exempt
      import future.keywords.in

      input_containers[c] {
        c := input.review.object.spec.containers[_]
      }
      input_containers[c] {
        c := input.review.object.spec.initContainers[_]
      }
      input_containers[c] {
        c := input.review.object.spec.ephemeralContainers[_]
      }

      privileged_container(c) {
        c.securityContext.privileged
      }
      privileged_container(c) {
        c.securityContext.allowPrivilegeEscalation
      }

      violation[{"msg": msg, "details": {}}] {
        input.review.operation in input.parameters.operations
        c := input_containers[_]
        not is_exempt(c)
        privileged_container(c)
        msg := sprintf("Privileged container is not allowed: %v, securityContext: %v", [c.name, c.securityContext])
      }

    libs: 
    - |
      package lib.k8sprivilegedcontainer

      import future.keywords.in

      is_exempt(container) {
        exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
        count(exempt_images) > 0
        img := split(container.image, ":")[0]
        img in exempt_images
      }
{{ end }}
